 ================================================================================================
  Phoebius Framework todo stub

  Copyright notice
 ================================================================================================

Logging
=======
Centralized pool of loggers (system logger, subsystem loggers)
LoggerPool::setAppLogger(new SysLogWorker());
LoggerPool::setPackageLogger(new FileLogWorker());

LoggerPool::getAppLogger()->log(...)
LoggerPool::getPackageLogger('Forms')->log(...)


Orm/Metainfo
============
Think over replacing serialized graph of OrmDomain/OrmClass/OrmProperty set of objects with
class/property-level attributes using addendum (http://code.google.com/p/addendum/)

Remove OrmPropertyType::defaultValue wrt of populating default property values by Entity itself
 
Dao/Cache
=========
When caching lists of objects, do not store an objects itself, but only their identifiers, that
can be used to easily resolve objects one by one from cache
 
 
Orm
===
add isMutated=false flag to OrmEntity, and reset it within setters
 + add _getMutationState(), _getIsMutated(OrmEntityMutationState $hash)
 
force dao to work with interface instead of OrmEntity to allow entity base class' forks in future

Container ctor should accept 'readonly' flag that defines a readonly collection (a readonly 
collection of entities is a collection that cannot be changes, saved, dropped and thus
object cloning is not needed)


Routing
=======
 implement rewirite rule that can work with incoming variables easier:
  - callback a delegate to proccess a variable to route
  - cast incoming variables to IObjectMappable types
 
 
Core
====
add kernelMode: ring0, ring1 for external libs that do not understand exceptions but use errors instead
Example:
	// affects Exceptionizer
	Kernel::stopNativeMode();
	require '/3rdparty/ExternalLib/ExternalClass.php';
	ExternalClass::doSomeWork();
	Kernel::restoreNativeMode();
 
 
Mvc
===
cut the casting logic to Routing system

IActionResult::handleResult(IControllerContext context) // replace IViewContext with IControllerContext

add the surrounding try-catch over target method (aka action) invokaction in ActionBasedController:
	try{
	
	}
	catch(ArgumentCompatibilityException e){
		// handle
	}

ActionBasedController: add type casting to Orm entities, i.e. automatically map incoming 
request variables into an entity
 
ActionBasedController filters:
 - http://www.asp.net/learn/mvc/tutorial-14-cs.aspx
 - http://quickstarts.asp.net/previews/mvc/mvc_Filtering.htm 
 - filters:
    - IAuthorizationFilter
    - IActionFilter
    - IResultFilter
    - IExceptionFilter 
    
protected ActionBasedController methods:
 - addControllerFilter(Filter)
 - addControllerFileters(array Filter[])
 - addFilter(action, Filter)
 - addFilters(action, array Filters[])
 

Views
=====

add helpers: 
 - Html (for generating HTML)
   - encode (aka htmlspecialchars)
   - textBox
   - password
   - ...
 - Route (use AilgeView->IViewContext->getRoute() to get the routingPolicy)
   - getLink(ruleName, parametersToPass)


Dal
===

add DbProcedureException (code == PgSqlError::RAISE_EXCEPTION)

DbType should not be final, PostgreSqlDbType can be to support custom types (Tsvector, inetaddr, array, etc)
 
rename PlainQuery to PlainTextQuery or smth like that
  
ConcatExpression: ISqlValueExpression
 
LIMIT/OFFSET in SelectQuery should be generated by IDialect


Session
=======

Implement SessionArea class; SessionArea ctor accepts a key, that defines the $_SESSION element

                