  ================================================================================================
 *
 * Copyright (c) 2010 Scand Ltd.
 *
 * This program is free software; you can redistribute it and/or modify it under the terms
 * of the GNU Lesser General Public License as published by the Free Software Foundation;
 * either version 3 of the License, or (at your option) any later version.
 *
 * You should have received a copy of the GNU Lesser General Public License along with
 * this program; if not, see <http://www.gnu.org/licenses/>.
 ================================================================================================

Phoebius v1.4
=================================
 + new routing system (like in fjick)
 + less greedy schema generator, verbose compiler
 + schema diff tool, db diff tool
 + MVC (controller -> view bridge) simplification


DAL/DB
======
Use postgresql RETURNING_ID instead of invoking the sequence
INSERT INTO tbl1 (id, ...) VALUES (1, ...) RETURNING id


Dao/Cache
=========
When caching lists of objects, do not store an objects itself, but only their identifiers, that
can be used to easily resolve objects one by one from cache


Orm
===
add isMutated=false flag to OrmEntity, and reset it within setters
 + add _getMutationState(), _getIsMutated(OrmEntityMutationState $hash)

force dao to work with interface instead of OrmEntity to allow entity base class' forks in future


Routing
=======
 implement rewirite rule that can work with incoming variables easier:
  - callback a delegate to proccess a variable to route
  - cast incoming variables to IObjectMappable types



Mvc
===
cut the casting logic to Routing system

IActionResult::handleResult(IControllerContext context) // replace IViewContext with IControllerContext

add the surrounding try-catch over target method (aka action) invokaction in ActionBasedController:
	try{

	}
	catch(ArgumentCompatibilityException e){
		// handle
	}

ActionBasedController: add type casting to Orm entities, i.e. automatically map incoming
request variables into an entity

ActionBasedController filters:
 - http://www.asp.net/learn/mvc/tutorial-14-cs.aspx
 - http://quickstarts.asp.net/previews/mvc/mvc_Filtering.htm
 - filters:
    - IAuthorizationFilter
    - IActionFilter
    - IResultFilter
    - IExceptionFilter

protected ActionBasedController methods:
 - addControllerFilter(Filter)
 - addControllerFileters(array Filter[])
 - addFilter(action, Filter)
 - addFilters(action, array Filters[])


Views
=====

add helpers:
 - Html (for generating HTML)
   - encode (aka htmlspecialchars)
   - textBox
   - password
   - ...
 - Route (use AilgeView->IViewContext->getRoute() to get the routingPolicy)
   - getLink(ruleName, parametersToPass)


Dal
===

add DbProcedureException (code == PgSqlError::RAISE_EXCEPTION)

ConcatExpression: ISqlValueExpression

LIMIT/OFFSET in SelectQuery should be generated by IDialect


Session
=======

Implement SessionArea class; SessionArea ctor accepts a key, that defines the $_SESSION element

